<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.loto.dao.WithdrawLogMapper" >
  <resultMap id="BaseResultMap" type="com.loto.model.WithdrawLog" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="pre_amount" property="preAmount" jdbcType="DECIMAL" />
    <result column="withdraw_amount" property="withdrawAmount" jdbcType="DECIMAL" />
    <result column="current_amount" property="currentAmount" jdbcType="DECIMAL" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="is_deal" property="isDeal" jdbcType="INTEGER" />
    <result column="deal_time" property="dealTime" jdbcType="TIMESTAMP" />
    <result column="data_status" property="dataStatus" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, user_id, pre_amount, withdraw_amount, current_amount, create_time, is_deal, deal_time, 
    data_status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.loto.model.WithdrawLogExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from withdraw_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from withdraw_log
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from withdraw_log
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.loto.model.WithdrawLogExample" >
    delete from withdraw_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.loto.model.WithdrawLog" >
    insert into withdraw_log (id, user_id, pre_amount, 
      withdraw_amount, current_amount, create_time, 
      is_deal, deal_time, data_status
      )
    values (#{id,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{preAmount,jdbcType=DECIMAL}, 
      #{withdrawAmount,jdbcType=DECIMAL}, #{currentAmount,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, 
      #{isDeal,jdbcType=INTEGER}, #{dealTime,jdbcType=TIMESTAMP}, #{dataStatus,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.loto.model.WithdrawLog" >
    insert into withdraw_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="preAmount != null" >
        pre_amount,
      </if>
      <if test="withdrawAmount != null" >
        withdraw_amount,
      </if>
      <if test="currentAmount != null" >
        current_amount,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="isDeal != null" >
        is_deal,
      </if>
      <if test="dealTime != null" >
        deal_time,
      </if>
      <if test="dataStatus != null" >
        data_status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="preAmount != null" >
        #{preAmount,jdbcType=DECIMAL},
      </if>
      <if test="withdrawAmount != null" >
        #{withdrawAmount,jdbcType=DECIMAL},
      </if>
      <if test="currentAmount != null" >
        #{currentAmount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeal != null" >
        #{isDeal,jdbcType=INTEGER},
      </if>
      <if test="dealTime != null" >
        #{dealTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dataStatus != null" >
        #{dataStatus,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.loto.model.WithdrawLogExample" resultType="java.lang.Integer" >
    select count(*) from withdraw_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update withdraw_log
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.preAmount != null" >
        pre_amount = #{record.preAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.withdrawAmount != null" >
        withdraw_amount = #{record.withdrawAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.currentAmount != null" >
        current_amount = #{record.currentAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.isDeal != null" >
        is_deal = #{record.isDeal,jdbcType=INTEGER},
      </if>
      <if test="record.dealTime != null" >
        deal_time = #{record.dealTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.dataStatus != null" >
        data_status = #{record.dataStatus,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update withdraw_log
    set id = #{record.id,jdbcType=BIGINT},
      user_id = #{record.userId,jdbcType=BIGINT},
      pre_amount = #{record.preAmount,jdbcType=DECIMAL},
      withdraw_amount = #{record.withdrawAmount,jdbcType=DECIMAL},
      current_amount = #{record.currentAmount,jdbcType=DECIMAL},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      is_deal = #{record.isDeal,jdbcType=INTEGER},
      deal_time = #{record.dealTime,jdbcType=TIMESTAMP},
      data_status = #{record.dataStatus,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.loto.model.WithdrawLog" >
    update withdraw_log
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="preAmount != null" >
        pre_amount = #{preAmount,jdbcType=DECIMAL},
      </if>
      <if test="withdrawAmount != null" >
        withdraw_amount = #{withdrawAmount,jdbcType=DECIMAL},
      </if>
      <if test="currentAmount != null" >
        current_amount = #{currentAmount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeal != null" >
        is_deal = #{isDeal,jdbcType=INTEGER},
      </if>
      <if test="dealTime != null" >
        deal_time = #{dealTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dataStatus != null" >
        data_status = #{dataStatus,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.loto.model.WithdrawLog" >
    update withdraw_log
    set user_id = #{userId,jdbcType=BIGINT},
      pre_amount = #{preAmount,jdbcType=DECIMAL},
      withdraw_amount = #{withdrawAmount,jdbcType=DECIMAL},
      current_amount = #{currentAmount,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      is_deal = #{isDeal,jdbcType=INTEGER},
      deal_time = #{dealTime,jdbcType=TIMESTAMP},
      data_status = #{dataStatus,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>